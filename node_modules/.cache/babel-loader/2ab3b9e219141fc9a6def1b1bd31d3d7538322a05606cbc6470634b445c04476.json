{"ast":null,"code":"var _jsxFileName = \"/Users/sajina/Desktop/code/Doodle/client/src/components/DrawingBoard.js\",\n  _s = $RefreshSig$();\n// src/components/DrawingBoard.js\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrawingBoard = ({\n  onSubmit\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [prediction, setPrediction] = useState(\"\");\n  useEffect(() => {\n    const interval = setInterval(() => {\n      handlePredict();\n    }, 1500); // Every 1.5 seconds, predict automatically\n\n    return () => clearInterval(interval); // Clean up when component unmounts\n  }, []);\n  const handlePredict = async () => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current.canvas.drawing;\n    setLoading(true);\n    canvas.toBlob(async blob => {\n      const formData = new FormData();\n      formData.append(\"file\", blob, \"doodle.png\");\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n          method: \"POST\",\n          body: formData\n        });\n        const data = await response.json();\n        setPrediction(data.prediction);\n      } catch (error) {\n        console.error(\"Prediction error:\", error);\n      }\n      setLoading(false);\n    });\n  };\n  const handleClear = () => {\n    canvasRef.current.clear();\n    setPrediction(\"\"); // Also clear prediction on Clear button\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CanvasDraw, {\n        ref: canvasRef,\n        brushRadius: 2,\n        brushColor: \"#fff\",\n        lazyRadius: 1,\n        canvasWidth: 900,\n        canvasHeight: 400,\n        backgroundColor: \"#000\",\n        style: {\n          cursor: \"url('/pencil-cursor.png') 0 24, auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClear,\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          backgroundColor: \"#C38D5F\",\n          color: \"#fff\",\n          border: \"none\",\n          borderRadius: \"8px\",\n          cursor: \"pointer\",\n          transition: \"background 0.3s\"\n        },\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: loading ? \"Predicting...\" : prediction ? `Prediction: ${prediction}` : \"Draw to start predicting...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingBoard, \"956nrTLgfZPjS6uJsCkywKa97n8=\");\n_c = DrawingBoard;\nexport default DrawingBoard;\nvar _c;\n$RefreshReg$(_c, \"DrawingBoard\");","map":{"version":3,"names":["React","useRef","useState","useEffect","CanvasDraw","jsxDEV","_jsxDEV","DrawingBoard","onSubmit","_s","canvasRef","loading","setLoading","prediction","setPrediction","interval","setInterval","handlePredict","clearInterval","current","canvas","drawing","toBlob","blob","formData","FormData","append","response","fetch","method","body","data","json","error","console","handleClear","clear","style","textAlign","marginTop","children","display","justifyContent","ref","brushRadius","brushColor","lazyRadius","canvasWidth","canvasHeight","backgroundColor","cursor","fileName","_jsxFileName","lineNumber","columnNumber","onClick","padding","fontSize","color","border","borderRadius","transition","_c","$RefreshReg$"],"sources":["/Users/sajina/Desktop/code/Doodle/client/src/components/DrawingBoard.js"],"sourcesContent":["// src/components/DrawingBoard.js\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\n\nconst DrawingBoard = ({ onSubmit }) => {\n  const canvasRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [prediction, setPrediction] = useState(\"\");\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      handlePredict();\n    }, 1500); // Every 1.5 seconds, predict automatically\n\n    return () => clearInterval(interval); // Clean up when component unmounts\n  }, []);\n\n  const handlePredict = async () => {\n    if (!canvasRef.current) return;\n\n    const canvas = canvasRef.current.canvas.drawing;\n    setLoading(true);\n\n    canvas.toBlob(async (blob) => {\n      const formData = new FormData();\n      formData.append(\"file\", blob, \"doodle.png\");\n\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n          method: \"POST\",\n          body: formData,\n        });\n\n        const data = await response.json();\n        setPrediction(data.prediction);\n      } catch (error) {\n        console.error(\"Prediction error:\", error);\n      }\n\n      setLoading(false);\n    });\n  };\n\n  const handleClear = () => {\n    canvasRef.current.clear();\n    setPrediction(\"\"); // Also clear prediction on Clear button\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n       <CanvasDraw\n  ref={canvasRef}\n  brushRadius={2}\n  brushColor=\"#fff\"\n  lazyRadius={1}\n  canvasWidth={900}\n  canvasHeight={400}\n  backgroundColor=\"#000\"\n  style={{ cursor: \"url('/pencil-cursor.png') 0 24, auto\" }}\n/>\n\n      </div>\n\n      <div style={{ marginTop: \"15px\" }}>\n        <button\n          onClick={handleClear}\n          style={{\n            padding: \"10px 20px\",\n            fontSize: \"16px\",\n            backgroundColor: \"#C38D5F\",\n            color: \"#fff\",\n            border: \"none\",\n            borderRadius: \"8px\",\n            cursor: \"pointer\",\n            transition: \"background 0.3s\",\n          }}\n        >\n          Clear\n        </button>\n      </div>\n\n      <h2 style={{ marginTop: \"20px\" }}>\n        {loading\n          ? \"Predicting...\"\n          : prediction\n          ? `Prediction: ${prediction}`\n          : \"Draw to start predicting...\"}\n      </h2>\n    </div>\n  );\n};\n\nexport default DrawingBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}