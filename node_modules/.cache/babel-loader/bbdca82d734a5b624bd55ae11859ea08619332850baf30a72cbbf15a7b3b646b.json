{"ast":null,"code":"var _jsxFileName = \"/Users/sajina/Desktop/code/Doodle/client/src/components/DrawingBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport GeneratedSketchAnimation from \"./GeneratedSketchAnimation\"; // Your animation component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DrawingBoard = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [prediction, setPrediction] = useState(\"\");\n  const [decodedImageArray, setDecodedImageArray] = useState(null);\n  const [isPredicting, setIsPredicting] = useState(false); // whether model predicted\n  const [loading, setLoading] = useState(false); // predict button loading state\n\n  const handlePredict = async () => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current.canvas.drawing;\n    setLoading(true); // Start loading spinner\n\n    canvas.toBlob(async blob => {\n      const formData = new FormData();\n      formData.append(\"file\", blob, \"doodle.png\");\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n          method: \"POST\",\n          body: formData\n        });\n        const data = await response.json();\n        setPrediction(data.prediction);\n\n        // Fetch the decoded/generated sketch\n        fetchGeneratedDecodedImage(data.prediction);\n      } catch (error) {\n        console.error(\"Prediction error:\", error);\n      } finally {\n        setLoading(false); // Stop loading\n        setIsPredicting(true); // Switch UI after prediction\n      }\n    });\n  };\n  const fetchGeneratedDecodedImage = async predictedClass => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/generate-decoded/${predictedClass}`);\n      const data = await response.json();\n      setDecodedImageArray(data.decoded_image);\n    } catch (error) {\n      console.error(\"Error fetching generated decoded image:\", error);\n    }\n  };\n  const handleClear = () => {\n    canvasRef.current.clear();\n    setPrediction(\"\");\n    setDecodedImageArray(null);\n    setIsPredicting(false);\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        transition: \"all 0.5s\",\n        transform: isPredicting ? \"scale(0.7)\" : \"scale(1)\",\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CanvasDraw, {\n        ref: canvasRef,\n        brushRadius: 2,\n        brushColor: \"#fff\",\n        lazyRadius: 1,\n        canvasWidth: isPredicting ? 300 : 600 // Shrink when predicting\n        ,\n        canvasHeight: isPredicting ? 300 : 400,\n        backgroundColor: \"#000\",\n        style: {\n          cursor: \"crosshair\",\n          border: \"2px solid gray\",\n          borderRadius: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), !isPredicting && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePredict,\n        disabled: loading,\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          backgroundColor: loading ? \"#aaa\" : \"#B9540C\",\n          color: \"#fff\",\n          border: \"none\",\n          borderRadius: \"8px\",\n          cursor: loading ? \"not-allowed\" : \"pointer\",\n          marginRight: \"10px\",\n          transition: \"background 0.3s\"\n        },\n        children: loading ? \"Predicting...\" : \"Predict\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClear,\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          backgroundColor: \"#C38D5F\",\n          color: \"#fff\",\n          border: \"none\",\n          borderRadius: \"8px\",\n          cursor: \"pointer\",\n          transition: \"background 0.3s\"\n        },\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), isPredicting && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          marginTop: \"30px\",\n          marginBottom: \"20px\"\n        },\n        children: \"Look at what the model can do! \\u2728\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), decodedImageArray ? /*#__PURE__*/_jsxDEV(GeneratedSketchAnimation, {\n        decodedImageArray: decodedImageArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"280px\",\n          height: \"280px\",\n          background: \"#000\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          border: \"2px solid gray\",\n          borderRadius: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"white\"\n          },\n          children: \"Generating sketch...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingBoard, \"cbV/hmF8xVwyGvSBLK/P2rvZ/l0=\");\n_c = DrawingBoard;\nexport default DrawingBoard;\nvar _c;\n$RefreshReg$(_c, \"DrawingBoard\");","map":{"version":3,"names":["React","useRef","useState","CanvasDraw","GeneratedSketchAnimation","jsxDEV","_jsxDEV","Fragment","_Fragment","DrawingBoard","_s","canvasRef","prediction","setPrediction","decodedImageArray","setDecodedImageArray","isPredicting","setIsPredicting","loading","setLoading","handlePredict","current","canvas","drawing","toBlob","blob","formData","FormData","append","response","fetch","method","body","data","json","fetchGeneratedDecodedImage","error","console","predictedClass","decoded_image","handleClear","clear","style","textAlign","marginTop","children","display","justifyContent","transition","transform","marginBottom","ref","brushRadius","brushColor","lazyRadius","canvasWidth","canvasHeight","backgroundColor","cursor","border","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","padding","fontSize","color","marginRight","width","height","background","alignItems","_c","$RefreshReg$"],"sources":["/Users/sajina/Desktop/code/Doodle/client/src/components/DrawingBoard.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport GeneratedSketchAnimation from \"./GeneratedSketchAnimation\"; // Your animation component\n\nconst DrawingBoard = () => {\n  const canvasRef = useRef(null);\n  const [prediction, setPrediction] = useState(\"\");\n  const [decodedImageArray, setDecodedImageArray] = useState(null);\n  const [isPredicting, setIsPredicting] = useState(false); // whether model predicted\n  const [loading, setLoading] = useState(false); // predict button loading state\n\n  const handlePredict = async () => {\n    if (!canvasRef.current) return;\n\n    const canvas = canvasRef.current.canvas.drawing;\n\n    setLoading(true); // Start loading spinner\n\n    canvas.toBlob(async (blob) => {\n      const formData = new FormData();\n      formData.append(\"file\", blob, \"doodle.png\");\n\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n          method: \"POST\",\n          body: formData,\n        });\n\n        const data = await response.json();\n        setPrediction(data.prediction);\n\n        // Fetch the decoded/generated sketch\n        fetchGeneratedDecodedImage(data.prediction);\n      } catch (error) {\n        console.error(\"Prediction error:\", error);\n      } finally {\n        setLoading(false); // Stop loading\n        setIsPredicting(true); // Switch UI after prediction\n      }\n    });\n  };\n\n  const fetchGeneratedDecodedImage = async (predictedClass) => {\n    try {\n      const response = await fetch(\n        `http://127.0.0.1:8000/generate-decoded/${predictedClass}`\n      );\n      const data = await response.json();\n      setDecodedImageArray(data.decoded_image);\n    } catch (error) {\n      console.error(\"Error fetching generated decoded image:\", error);\n    }\n  };\n\n  const handleClear = () => {\n    canvasRef.current.clear();\n    setPrediction(\"\");\n    setDecodedImageArray(null);\n    setIsPredicting(false);\n    setLoading(false);\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n      {/* 🖌️ User Drawing */}\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          transition: \"all 0.5s\",\n          transform: isPredicting ? \"scale(0.7)\" : \"scale(1)\",\n          marginBottom: \"20px\",\n        }}\n      >\n        <CanvasDraw\n          ref={canvasRef}\n          brushRadius={2}\n          brushColor=\"#fff\"\n          lazyRadius={1}\n          canvasWidth={isPredicting ? 300 : 600} // Shrink when predicting\n          canvasHeight={isPredicting ? 300 : 400}\n          backgroundColor=\"#000\"\n          style={{\n            cursor: \"crosshair\",\n            border: \"2px solid gray\",\n            borderRadius: \"10px\",\n          }}\n        />\n      </div>\n\n      {/* Buttons */}\n      {!isPredicting && (\n        <div style={{ marginTop: \"10px\" }}>\n          <button\n            onClick={handlePredict}\n            disabled={loading}\n            style={{\n              padding: \"10px 20px\",\n              fontSize: \"16px\",\n              backgroundColor: loading ? \"#aaa\" : \"#B9540C\",\n              color: \"#fff\",\n              border: \"none\",\n              borderRadius: \"8px\",\n              cursor: loading ? \"not-allowed\" : \"pointer\",\n              marginRight: \"10px\",\n              transition: \"background 0.3s\",\n            }}\n          >\n            {loading ? \"Predicting...\" : \"Predict\"}\n          </button>\n\n          <button\n            onClick={handleClear}\n            style={{\n              padding: \"10px 20px\",\n              fontSize: \"16px\",\n              backgroundColor: \"#C38D5F\",\n              color: \"#fff\",\n              border: \"none\",\n              borderRadius: \"8px\",\n              cursor: \"pointer\",\n              transition: \"background 0.3s\",\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n\n      {/* ✨ After Prediction: Show Magic */}\n      {isPredicting && (\n        <>\n          <h2 style={{ marginTop: \"30px\", marginBottom: \"20px\" }}>\n            Look at what the model can do! ✨\n          </h2>\n\n          {decodedImageArray ? (\n            <GeneratedSketchAnimation decodedImageArray={decodedImageArray} />\n          ) : (\n            <div\n              style={{\n                width: \"280px\",\n                height: \"280px\",\n                background: \"#000\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                border: \"2px solid gray\",\n                borderRadius: \"10px\",\n              }}\n            >\n              <p style={{ color: \"white\" }}>Generating sketch...</p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default DrawingBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}