{"ast":null,"code":"var _jsxFileName = \"/Users/sajina/Desktop/code/Doodle/client/src/components/DrawingBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport GeneratedSketchAnimation from \"./GeneratedSketchAnimation\"; // 👈 Import your animation component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrawingBoard = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [prediction, setPrediction] = useState(\"\");\n  const [decodedImageArray, setDecodedImageArray] = useState(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const intervalRef = useRef(null);\n  const startPredicting = () => {\n    if (intervalRef.current) return;\n    intervalRef.current = setInterval(() => {\n      handlePredict();\n    }, 1500);\n  };\n  const stopPredicting = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n  const handlePredict = async () => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current.canvas.drawing;\n    canvas.toBlob(async blob => {\n      const formData = new FormData();\n      formData.append(\"file\", blob, \"doodle.png\");\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n          method: \"POST\",\n          body: formData\n        });\n        const data = await response.json();\n        setPrediction(data.prediction);\n\n        // After getting prediction, fetch the generated image array\n        fetchGeneratedDecodedImage(data.prediction);\n      } catch (error) {\n        console.error(\"Prediction error:\", error);\n      }\n    });\n  };\n  const fetchGeneratedDecodedImage = async predictedClass => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/generate-decoded/${predictedClass}`);\n      const data = await response.json(); // Assuming server sends 2D array\n\n      setDecodedImageArray(data.decoded_image); // Store decoded image array\n    } catch (error) {\n      console.error(\"Error fetching generated decoded image:\", error);\n    }\n  };\n  const handleClear = () => {\n    canvasRef.current.clear();\n    setPrediction(\"\");\n    setDecodedImageArray(null);\n    stopPredicting();\n    setIsDrawing(false);\n  };\n  const handleMouseDown = () => {\n    setIsDrawing(true);\n    startPredicting();\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n    stopPredicting();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        gap: \"50px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Drawing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n          ref: canvasRef,\n          brushRadius: 2,\n          brushColor: \"#fff\",\n          lazyRadius: 1,\n          canvasWidth: 400,\n          canvasHeight: 400,\n          backgroundColor: \"#000\",\n          style: {\n            cursor: \"crosshair\",\n            border: \"2px solid gray\",\n            borderRadius: \"10px\"\n          },\n          onMouseDown: handleMouseDown,\n          onMouseUp: handleMouseUp,\n          onTouchStart: handleMouseDown,\n          onTouchEnd: handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Model's Generated Sketch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), decodedImageArray ? /*#__PURE__*/_jsxDEV(GeneratedSketchAnimation, {\n          decodedImageArray: decodedImageArray\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"280px\",\n            height: \"280px\",\n            background: \"#000\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            border: \"2px solid gray\",\n            borderRadius: \"10px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"white\"\n            },\n            children: \"Waiting for prediction...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClear,\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          backgroundColor: \"#C38D5F\",\n          color: \"#fff\",\n          border: \"none\",\n          borderRadius: \"8px\",\n          cursor: \"pointer\",\n          transition: \"background 0.3s\"\n        },\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: prediction ? `Prediction: ${prediction}` : \"Start Drawing!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingBoard, \"qCzyqbwxFBgA2YflqlHj3YnObpY=\");\n_c = DrawingBoard;\nexport default DrawingBoard;\nvar _c;\n$RefreshReg$(_c, \"DrawingBoard\");","map":{"version":3,"names":["React","useRef","useState","useEffect","CanvasDraw","GeneratedSketchAnimation","jsxDEV","_jsxDEV","DrawingBoard","_s","canvasRef","prediction","setPrediction","decodedImageArray","setDecodedImageArray","isDrawing","setIsDrawing","intervalRef","startPredicting","current","setInterval","handlePredict","stopPredicting","clearInterval","canvas","drawing","toBlob","blob","formData","FormData","append","response","fetch","method","body","data","json","fetchGeneratedDecodedImage","error","console","predictedClass","decoded_image","handleClear","clear","handleMouseDown","handleMouseUp","style","textAlign","marginTop","children","display","justifyContent","gap","fileName","_jsxFileName","lineNumber","columnNumber","ref","brushRadius","brushColor","lazyRadius","canvasWidth","canvasHeight","backgroundColor","cursor","border","borderRadius","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","width","height","background","alignItems","color","onClick","padding","fontSize","transition","_c","$RefreshReg$"],"sources":["/Users/sajina/Desktop/code/Doodle/client/src/components/DrawingBoard.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport GeneratedSketchAnimation from \"./GeneratedSketchAnimation\"; // 👈 Import your animation component\n\nconst DrawingBoard = () => {\n  const canvasRef = useRef(null);\n  const [prediction, setPrediction] = useState(\"\");\n  const [decodedImageArray, setDecodedImageArray] = useState(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const intervalRef = useRef(null);\n\n  const startPredicting = () => {\n    if (intervalRef.current) return;\n    intervalRef.current = setInterval(() => {\n      handlePredict();\n    }, 1500);\n  };\n\n  const stopPredicting = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  const handlePredict = async () => {\n    if (!canvasRef.current) return;\n\n    const canvas = canvasRef.current.canvas.drawing;\n    canvas.toBlob(async (blob) => {\n      const formData = new FormData();\n      formData.append(\"file\", blob, \"doodle.png\");\n\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n          method: \"POST\",\n          body: formData,\n        });\n\n        const data = await response.json();\n        setPrediction(data.prediction);\n\n        // After getting prediction, fetch the generated image array\n        fetchGeneratedDecodedImage(data.prediction);\n      } catch (error) {\n        console.error(\"Prediction error:\", error);\n      }\n    });\n  };\n\n  const fetchGeneratedDecodedImage = async (predictedClass) => {\n    try {\n      const response = await fetch(\n        `http://127.0.0.1:8000/generate-decoded/${predictedClass}`\n      );\n      const data = await response.json(); // Assuming server sends 2D array\n\n      setDecodedImageArray(data.decoded_image); // Store decoded image array\n    } catch (error) {\n      console.error(\"Error fetching generated decoded image:\", error);\n    }\n  };\n\n  const handleClear = () => {\n    canvasRef.current.clear();\n    setPrediction(\"\");\n    setDecodedImageArray(null);\n    stopPredicting();\n    setIsDrawing(false);\n  };\n\n  const handleMouseDown = () => {\n    setIsDrawing(true);\n    startPredicting();\n  };\n\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n    stopPredicting();\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n      <div style={{ display: \"flex\", justifyContent: \"center\", gap: \"50px\" }}>\n        {/* 🖌️ User Drawing */}\n        <div>\n          <h3>Your Drawing</h3>\n          <CanvasDraw\n            ref={canvasRef}\n            brushRadius={2}\n            brushColor=\"#fff\"\n            lazyRadius={1}\n            canvasWidth={400}\n            canvasHeight={400}\n            backgroundColor=\"#000\"\n            style={{\n              cursor: \"crosshair\",\n              border: \"2px solid gray\",\n              borderRadius: \"10px\",\n            }}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n            onTouchStart={handleMouseDown}\n            onTouchEnd={handleMouseUp}\n          />\n        </div>\n\n        {/* 🎯 Generated Sketch Animation */}\n        <div>\n          <h3>Model's Generated Sketch</h3>\n          {decodedImageArray ? (\n            <GeneratedSketchAnimation decodedImageArray={decodedImageArray} />\n          ) : (\n            <div\n              style={{\n                width: \"280px\",\n                height: \"280px\",\n                background: \"#000\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                border: \"2px solid gray\",\n                borderRadius: \"10px\",\n              }}\n            >\n              <p style={{ color: \"white\" }}>Waiting for prediction...</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div style={{ marginTop: \"20px\" }}>\n        <button\n          onClick={handleClear}\n          style={{\n            padding: \"10px 20px\",\n            fontSize: \"16px\",\n            backgroundColor: \"#C38D5F\",\n            color: \"#fff\",\n            border: \"none\",\n            borderRadius: \"8px\",\n            cursor: \"pointer\",\n            transition: \"background 0.3s\",\n          }}\n        >\n          Clear\n        </button>\n      </div>\n\n      <h2 style={{ marginTop: \"20px\" }}>\n        {prediction ? `Prediction: ${prediction}` : \"Start Drawing!\"}\n      </h2>\n    </div>\n  );\n};\n\nexport default DrawingBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}