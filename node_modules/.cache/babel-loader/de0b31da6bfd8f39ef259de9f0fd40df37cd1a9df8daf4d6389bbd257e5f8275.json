{"ast":null,"code":"var _jsxFileName = \"/Users/sajina/Desktop/code/Doodle/client/src/components/DrawingBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrawingBoard = ({\n  onSubmit\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [prediction, setPrediction] = useState(\"\");\n  const [isDrawing, setIsDrawing] = useState(false); // Track if user is actively drawing\n  const intervalRef = useRef(null); // For clearing interval later\n\n  const startPredicting = () => {\n    if (intervalRef.current) return; // Already running\n\n    intervalRef.current = setInterval(() => {\n      handlePredict();\n    }, 300); // Predict every 1.5 seconds while drawing\n  };\n  const stopPredicting = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n  const handlePredict = async () => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current.canvas.drawing;\n    canvas.toBlob(async blob => {\n      const formData = new FormData();\n      formData.append(\"file\", blob, \"doodle.png\");\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n          method: \"POST\",\n          body: formData\n        });\n        const data = await response.json();\n        setPrediction(data.prediction);\n      } catch (error) {\n        console.error(\"Prediction error:\", error);\n      }\n    });\n  };\n  const handleClear = () => {\n    canvasRef.current.clear();\n    setPrediction(\"\");\n    stopPredicting();\n    setIsDrawing(false);\n  };\n  const handleMouseDown = () => {\n    setIsDrawing(true);\n    startPredicting();\n  };\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n    stopPredicting();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      onMouseDown: handleMouseDown,\n      onMouseUp: handleMouseUp,\n      onTouchStart: handleMouseDown,\n      onTouchEnd: handleMouseUp,\n      children: /*#__PURE__*/_jsxDEV(CanvasDraw, {\n        ref: canvasRef,\n        brushRadius: 2,\n        brushColor: \"#fff\",\n        lazyRadius: 1,\n        canvasWidth: 900,\n        canvasHeight: 400,\n        backgroundColor: \"#000\",\n        style: {\n          cursor: \"crosshair\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClear,\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          backgroundColor: \"#C38D5F\",\n          color: \"#fff\",\n          border: \"none\",\n          borderRadius: \"8px\",\n          cursor: \"pointer\",\n          transition: \"background 0.3s\"\n        },\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: loading ? \"Predicting...\" : prediction ? `Prediction: ${prediction}` : \"Start Drawing to Predict\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingBoard, \"3wvaCo3POR7lrJl7/YxgJc9dgdg=\");\n_c = DrawingBoard;\nexport default DrawingBoard;\nvar _c;\n$RefreshReg$(_c, \"DrawingBoard\");","map":{"version":3,"names":["React","useRef","useState","useEffect","CanvasDraw","jsxDEV","_jsxDEV","DrawingBoard","onSubmit","_s","canvasRef","loading","setLoading","prediction","setPrediction","isDrawing","setIsDrawing","intervalRef","startPredicting","current","setInterval","handlePredict","stopPredicting","clearInterval","canvas","drawing","toBlob","blob","formData","FormData","append","response","fetch","method","body","data","json","error","console","handleClear","clear","handleMouseDown","handleMouseUp","style","textAlign","marginTop","children","display","justifyContent","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","ref","brushRadius","brushColor","lazyRadius","canvasWidth","canvasHeight","backgroundColor","cursor","fileName","_jsxFileName","lineNumber","columnNumber","onClick","padding","fontSize","color","border","borderRadius","transition","_c","$RefreshReg$"],"sources":["/Users/sajina/Desktop/code/Doodle/client/src/components/DrawingBoard.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\n\nconst DrawingBoard = ({ onSubmit }) => {\n  const canvasRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [prediction, setPrediction] = useState(\"\");\n  const [isDrawing, setIsDrawing] = useState(false); // Track if user is actively drawing\n  const intervalRef = useRef(null); // For clearing interval later\n\n  const startPredicting = () => {\n    if (intervalRef.current) return; // Already running\n\n    intervalRef.current = setInterval(() => {\n      handlePredict();\n    }, 300); // Predict every 1.5 seconds while drawing\n  };\n\n  const stopPredicting = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  const handlePredict = async () => {\n    if (!canvasRef.current) return;\n\n    const canvas = canvasRef.current.canvas.drawing;\n    canvas.toBlob(async (blob) => {\n      const formData = new FormData();\n      formData.append(\"file\", blob, \"doodle.png\");\n\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n          method: \"POST\",\n          body: formData,\n        });\n\n        const data = await response.json();\n        setPrediction(data.prediction);\n      } catch (error) {\n        console.error(\"Prediction error:\", error);\n      }\n    });\n  };\n\n  const handleClear = () => {\n    canvasRef.current.clear();\n    setPrediction(\"\");\n    stopPredicting();\n    setIsDrawing(false);\n  };\n\n  const handleMouseDown = () => {\n    setIsDrawing(true);\n    startPredicting();\n  };\n\n  const handleMouseUp = () => {\n    setIsDrawing(false);\n    stopPredicting();\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n      <div\n        style={{ display: \"flex\", justifyContent: \"center\" }}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onTouchEnd={handleMouseUp}\n      >\n        <CanvasDraw\n          ref={canvasRef}\n          brushRadius={2}\n          brushColor=\"#fff\"\n          lazyRadius={1}\n          canvasWidth={900}\n          canvasHeight={400}\n          backgroundColor=\"#000\"\n          style={{ cursor: \"crosshair\" }}\n        />\n      </div>\n\n      <div style={{ marginTop: \"15px\" }}>\n        <button\n          onClick={handleClear}\n          style={{\n            padding: \"10px 20px\",\n            fontSize: \"16px\",\n            backgroundColor: \"#C38D5F\",\n            color: \"#fff\",\n            border: \"none\",\n            borderRadius: \"8px\",\n            cursor: \"pointer\",\n            transition: \"background 0.3s\",\n          }}\n        >\n          Clear\n        </button>\n      </div>\n\n      <h2 style={{ marginTop: \"20px\" }}>\n        {loading\n          ? \"Predicting...\"\n          : prediction\n          ? `Prediction: ${prediction}`\n          : \"Start Drawing to Predict\"}\n      </h2>\n    </div>\n  );\n};\n\nexport default DrawingBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}